#ifndef PROTOCOLPARSER_H
#define PROTOCOLPARSER_H

#include <PetriEngine/AbstractPetriNetBuilder.h>
#include "../Misc/AbstractQueryListBuilder.h"

#include <QXmlStreamReader>
#include <QIODevice>
#include <QHash>
#include <QList>

class ProtocolParser
{
	/** Types if nodes that is assigned an id */
	enum NodeType{
		Place,
		Transition
	};
	/** Tuple of name and place/transition designation */
	struct NodeName{
		NodeName(){}
		NodeName(NodeType type, QString name){
			this->type = type;
			this->name = name;
		}
		NodeType type;
		QString name;
	};
	/** Arc entry, because we can't create arcs before all nodes are created */
	struct ArcEntry{
		ArcEntry(){}
		ArcEntry(QString src, QString dst, int weight){
			this->src = src;
			this->dst = dst;
			this->weight = weight;
		}
		QString src;
		QString dst;
		int weight;
	};
public:
	ProtocolParser(){ builder = NULL; qBuilder = NULL; }
	/** Parse input and build result with builder */
	void parse(QIODevice* input, PetriEngine::AbstractPetriNetBuilder* builder, AbstractQueryListBuilder* qbuilder = NULL);
private:
	void parseprotocol();


	void parserole();
	void parseVariable();

	void parseStates(QString roleName);
	void parseRule(QString roleName);
	void parsePre(QString& pre, QString roleName, QString transName);
	void parsePost(QString& post, QString roleName, QString transName);

	void parseState(QString roleName);
	//void place();
	//void transition();
	//void arc();
	//void position(qreal& x, qreal& y); //TODO make some autogenerated positions

	void value(QString& value);


	/** Builder for creating new petri net */
	PetriEngine::AbstractPetriNetBuilder* builder;
	/** Query builder */
	AbstractQueryListBuilder* qBuilder;
	QXmlStreamReader xml;
	QList<ArcEntry> arcs;
	/** Maps Ids to names */
	QHash<QString,NodeName> idmap;
};

#endif // PROTOCOLPARSER_H
